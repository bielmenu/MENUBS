local ArrayField = loadstring(game:HttpGet('https://raw.githubusercontent.com/bielmenu/MENUBS/refs/heads/main/Gui'))()

local Window = ArrayField:CreateWindow({
	Name = "ðŸ’¥Biel Menu Mini City - NewðŸ’¥",
	LoadingTitle = "Biel Menu",
	LoadingSubtitle = "by BS",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = game.PlaceId, -- Create a custom folder for your hub/game
		FileName = "ArrayField"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = true, -- Set this to true to use our key system
	KeySettings = {
		Title = "Key",
		Subtitle = "Key System",
		Note = "",
		FileName = "Key", -- It is recommended to use something unique as other scripts using ArrayField may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like ArrayField to get the key from
		Actions = {
			[1] = {
				Text = 'Click here to copy the key link <--',
				OnPress = function()
					print('Pressed')
				end,
			}
		},
		Key = {"Sla"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

--[[Window:Prompt({
	Title = 'Sej',
	SubTitle = 'SubTitle',
	Content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
	Actions = {
		Accept = {
			Name = 'Accept',
			Callback = function()
				print('Pressed')
			end,
		}
	}
})]]

local Tab = Window:CreateTab("Main", 4483362458)

local Section = Tab:CreateSection("Revistar",false) -- The 2nd argument is to tell if its only a Title and doesnt contain element

local function deletarNotifyDeErro()
	local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

	for _, gui in ipairs(playerGui:GetChildren()) do
		if gui.Name == "NotifyGui" and gui:IsA("ScreenGui") then
			local frame = gui:FindFirstChild("Frame")
			if frame then
				for _, child in ipairs(frame:GetChildren()) do
					if child:IsA("TextLabel") and child.Text:match("^Error #%d+") then
						child:Destroy() -- Remove toda a notificaÃ§Ã£o
						print("NotificaÃ§Ã£o de erro removida:", child.Text)
					end
				end
			end
		end
	end
end

local outroCont = game.Players.LocalPlayer.PlayerGui:WaitForChild("BackpackNova"):WaitForChild("Inventario"):WaitForChild("Outro").conteudo

getgenv().PuxarCarai = false

while true do
	if getgenv().PuxarCarai then
	
	local revistaInfo = game.Players.LocalPlayer:FindFirstChild("RevistaPlayer")

	if revistaInfo and revistaInfo.Value ~= nil then
		local invTarget = revistaInfo.Value:FindFirstChild("Inv")

		if invTarget then
			local items = invTarget:GetChildren()

			for i, item in ipairs(items) do
				local args = {
					"mudaInv",
					tostring(i),
					item.Name,
					1
				}

				local itemGui = outroCont:FindFirstChild(item.Name, true)

				if itemGui and itemGui:FindFirstChild("Qnt") and itemGui.Qnt:IsA("TextLabel") then
					local text = itemGui.Qnt.Text

					if text:sub(1, 1) == "x" then
						text = text:sub(2)
					end

					local qtd = tonumber(text)
					if qtd and qtd >= 1 then
						args[4] = qtd
					else
						args[4] = 1
					end
				end

				task.spawn(function()
					local invRequest = game.ReplicatedStorage:WaitForChild("Modules"):WaitForChild("InvRemotes"):WaitForChild("InvRequest")
					invRequest:InvokeServer(unpack(args))
				end)
			end
		end
	end
	
	deletarNotifyDeErro()
	end
	task.wait(.1)
end

local Toggle = Tab:CreateToggle({
	Name = "Puxar Tudo - Novo",
	CurrentValue = false,
	Flag = "PuxarGG", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		getgenv().PuxarCarai = Value
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle Example",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})
